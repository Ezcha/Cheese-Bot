{
  "name": "Set",
  "description": "sets in javascript",
  "author": {
    "name": "Paul Vorbach",
    "email": "paul@vorb.de",
    "url": "http://vorb.de/"
  },
  "tags": [
    "set",
    "collection"
  ],
  "version": "0.4.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/pvorb/node-set.git"
  },
  "bugs": {
    "url": "https://github.com/pvorb/node-set/issues"
  },
  "main": "./set.js",
  "engines": {
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://vorb.de/license/mit.html"
    }
  ],
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "# Set\n\nstring sets for javascript\n\nThis library can be used as a shim for [EcmaScript Harmony’s Set\nclass](http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets#set).\n\n## Installation\n\nFor the server:\n\n    npm install Set\n\nFor the browser:\n\n    ender build Set\n\n## Usage\n\n~~~ javascript\nvar Set = require('Set');\n\nvar alpha = new Set([ 'a', 'b', 'c' ]);\n\nconsole.log(alpha.toString());\n\nalpha.add('d');\n\nconsole.log(alpha.toString());\n\nalpha.remove('a', 'b');\n\nconsole.log(alpha.toString());\n\nconsole.log(alpha.contains('c'));\n~~~\n\n## API\n\n~~~ javascript\nnew Set(obj)\n~~~\n\nCreate a set from an array or object.\n\n~~~ javascript\nnew Set(contains)\n~~~\n\nCreate a set from a function.\n\nThis good for creating infinite sets. `contains` is a function that takes one\nargument and returns `true` if it is in the set and `false` otherwise. It works\nwell together with `set.add()` and `set.remove()`, but not with `set.toArray()`\nand `set.toString()`.\n\n~~~ javascript\nset.add(val, ...)\n~~~\n\nAdd one or more elements to the set.\n\n~~~ javascript\nset.addAll(array)\n~~~\n\nAdd all elements from array to the set.\n\n~~~ javascript\nset.remove(val, ...)\nset.['delete'](val)\n~~~\n\nRemove one or more elements from the set.\n\n~~~ javascript\nset.contains(val)\nset.has(val)\n~~~\n\nCheck if the set contains `val`.\n\n~~~ javascript\nset.size()\n~~~\n\nReturns the size of the set.\n\n~~~ javascript\nset.toArray()\nset['*values']()\n~~~\n\nReturns the elements of the set as an Array.\n\n~~~ javascript\nset.toString()\n~~~\n\nSerialize the set.\n\n## License\n\n~~~\nCopyright © 2012 Paul Vorbach\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the “Software”), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n~~~\n",
  "readmeFilename": "README.md",
  "_id": "Set@0.4.1",
  "dist": {
    "shasum": "8385587be9863e49d2ffd7a85e1a1e4b11633ca6",
    "tarball": "http://registry.npmjs.org/Set/-/Set-0.4.1.tgz"
  },
  "_from": "Set@>=0.4.0 <0.5.0",
  "_npmVersion": "1.2.14",
  "_npmUser": {
    "name": "pvorb",
    "email": "paul@vorb.de"
  },
  "maintainers": [
    {
      "name": "pvorb",
      "email": "paul@vorb.de"
    }
  ],
  "directories": {},
  "_shasum": "8385587be9863e49d2ffd7a85e1a1e4b11633ca6",
  "_resolved": "https://registry.npmjs.org/Set/-/Set-0.4.1.tgz",
  "homepage": "https://github.com/pvorb/node-set#readme"
}
