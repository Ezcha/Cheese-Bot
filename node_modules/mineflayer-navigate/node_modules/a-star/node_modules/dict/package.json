{
  "name": "dict",
  "description": "A lightweight but safe dictionary, for when Object won't cut it",
  "keywords": [
    "dict",
    "dictionary",
    "map",
    "string map",
    "hash"
  ],
  "version": "1.1.0",
  "author": {
    "name": "Domenic Denicola",
    "email": "domenic@domenicdenicola.com",
    "url": "http://domenicdenicola.com"
  },
  "license": "WTFPL",
  "repository": {
    "type": "git",
    "url": "git://github.com/domenic/dict.git"
  },
  "bugs": {
    "url": "http://github.com/domenic/dict/issues"
  },
  "main": "./dict.js",
  "scripts": {
    "test": "mocha",
    "lint": "jshint dict.js"
  },
  "devDependencies": {
    "chai": ">= 1.3.0",
    "coffee-script": ">= 1.4.0",
    "jshint": ">= 0.9.1",
    "mocha": ">= 1.6.0"
  },
  "readme": "An easy but safe string-keyed store\n===================================\n\nDon't stuff things into objects. Use a `dict` instead.\n\nThe problem\n-----------\n\nYou're probably used to stuffing things into objects:\n\n```javascript\nvar hash = {};\n\nhash[\"foo\"] = \"bar\";\n\nconsole.log(\"foo\" in hash ? hash[\"foo\"] : \"not there\"); // \"bar\"\n```\n\nHowever this doesn't always work, because your naïve hashes inherit from\n[`Object.prototype`][1]:\n\n```javascript\nvar hash = {};\n\nconsole.log(\"hasOwnProperty\" in hash); // true!\n```\n\nEven worse, the magic `__proto__` property can really [ruin your day][2]:\n\n```javascript\nvar hash = {};\nvar anotherObject = { foo: \"bar\" };\n\nhash[\"__proto__\"] = anotherObject;\n\nconsole.log(\"foo\" in hash);       // true!!\nconsole.log(\"__proto__\" in hash); // false!!!\n```\n\nUsually you're smart enough to avoid silly key names like `\"hasOwnProperty\"`, `\"__proto__\"`, and all the rest. But sometimes you want to\nstore user input in your hashes. Uh-oh…\n\ndict is the solution\n----------------------\n\nJust do an `npm install dict` and you're good to go:\n\n```javascript\nvar dict = require(\"dict\");\n\nvar d = dict();\n\nd.set(\"foo\", \"bar\");\nconsole.log(d.get(\"foo\", \"not there\")); // \"bar\"\n\nconsole.log(d.has(\"hasOwnProperty\")); // false :)\n\nvar anotherObject = { baz: \"qux\" };\nd.set(\"__proto__\", anotherObject);\nconsole.log(d.has(\"baz\"));       // false :)\nconsole.log(d.has(\"__proto__\")); // true :)\n```\n\nFeaturing\n---------\n\n* A lightweight [ES6-inspired][3] API: `get`, `set`, `has`, `delete`.\n* `get` accepts a second argument as a fallback for if the key isn't present (like [Mozilla's `WeakMap`][4]).\n* Doesn't let you get away with being dumb: if you pass a non-string as a key, you're going to get a `TypeError`.\n* A full suite of unit tests using [mocha][5] and [chai][6]: `npm test` awaits you.\n\nSee Also\n--------\n\n* [rauschma/strmap][7] for something a bit more full-featured (albeit exposing its internals everywhere, if you care about that).\n* [dherman/dictjs][8] if you live in an ES6 world.\n* [es-lab's StringMap.js][9] if you can deal with the lack of npm support.\n* [es6-shim][10]'s `Map` if you want more than just strings for your keys.\n\n\n[1]:  https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/prototype\n[2]:  http://www.google.com/support/forum/p/Google+Docs/thread?tid=0cd4a00bd4aef9e4\n[3]:  http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets\n[4]:  https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/WeakMap\n[5]:  http://visionmedia.github.com/mocha/\n[6]:  http://chaijs.com/\n[7]:  https://github.com/rauschma/strmap\n[8]:  https://github.com/dherman/dictjs\n[9]:  http://code.google.com/p/es-lab/source/browse/trunk/src/ses/StringMap.js\n[10]: https://github.com/paulmillr/es6-shim\n",
  "_id": "dict@1.1.0",
  "dist": {
    "shasum": "73d1f53012def76b4f21e9f0d9771ebcc2cdfb84",
    "tarball": "http://registry.npmjs.org/dict/-/dict-1.1.0.tgz"
  },
  "_npmVersion": "1.1.59",
  "_npmUser": {
    "name": "domenic",
    "email": "domenic@domenicdenicola.com"
  },
  "maintainers": [
    {
      "name": "domenic",
      "email": "domenic@domenicdenicola.com"
    }
  ],
  "directories": {},
  "_shasum": "73d1f53012def76b4f21e9f0d9771ebcc2cdfb84",
  "_resolved": "https://registry.npmjs.org/dict/-/dict-1.1.0.tgz",
  "_from": "dict@>=1.1.0 <1.2.0",
  "homepage": "https://github.com/domenic/dict#readme"
}
