"use strict";

var _get = require("babel-runtime/helpers/get")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var Transform = require("readable-stream").Transform;

var Serializer = (function (_Transform) {
  _inherits(Serializer, _Transform);

  function Serializer(proto, mainType) {
    _classCallCheck(this, Serializer);

    _get(Object.getPrototypeOf(Serializer.prototype), "constructor", this).call(this, { writableObjectMode: true });
    this.proto = proto;
    this.mainType = mainType;
  }

  _createClass(Serializer, [{
    key: "createPacketBuffer",
    value: function createPacketBuffer(packet) {
      return this.proto.createPacketBuffer(this.mainType, packet);
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      try {
        var buf = this.createPacketBuffer(chunk);
        this.push(buf);
        return cb();
      } catch (e) {
        return cb(e);
      }
    }
  }]);

  return Serializer;
})(Transform);

var Parser = (function (_Transform2) {
  _inherits(Parser, _Transform2);

  function Parser(proto, mainType) {
    _classCallCheck(this, Parser);

    _get(Object.getPrototypeOf(Parser.prototype), "constructor", this).call(this, { readableObjectMode: true });
    this.proto = proto;
    this.mainType = mainType;
  }

  _createClass(Parser, [{
    key: "parsePacketBuffer",
    value: function parsePacketBuffer(buffer) {
      return this.proto.parsePacketBuffer(this.mainType, buffer);
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, enc, cb) {
      var packet;
      try {
        packet = this.parsePacketBuffer(chunk);
      } catch (e) {
        return cb(e);
      }
      this.push(packet);
      return cb();
    }
  }]);

  return Parser;
})(Transform);

module.exports = {
  Serializer: Serializer,
  Parser: Parser
};
//# sourceMappingURL=maps/serializer.js.map
