{"version":3,"sources":["createClient.js"],"names":[],"mappings":"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","file":"createClient.js","sourcesContent":["var ursa=require(\"./ursa\");\nvar net = require('net');\nvar dns = require('dns');\nvar Client = require('./client');\nvar assert = require('assert');\nvar crypto = require('crypto');\nvar yggdrasil = require('yggdrasil')({});\nvar yggserver = require('yggdrasil').server({});\nvar states = require(\"./states\");\nvar debug = require(\"./debug\");\nvar uuid = require('uuid');\n\nmodule.exports=createClient;\n\nClient.prototype.connect = function(port, host) {\n  var self = this;\n  if(port == 25565 && net.isIP(host) === 0) {\n    dns.resolveSrv(\"_minecraft._tcp.\" + host, function(err, addresses) {\n      if(addresses && addresses.length > 0) {\n        self.setSocket(net.connect(addresses[0].port, addresses[0].name));\n      } else {\n        self.setSocket(net.connect(port, host));\n      }\n    });\n  } else {\n    self.setSocket(net.connect(port, host));\n  }\n};\n\nfunction createClient(options) {\n  assert.ok(options, \"options is required\");\n  var port = options.port || 25565;\n  var host = options.host || 'localhost';\n  var clientToken = options.clientToken || uuid.v4();\n  var accessToken;\n\n  assert.ok(options.username, \"username is required\");\n  var haveCredentials = options.password != null || (clientToken != null && options.session != null);\n  var keepAlive = options.keepAlive == null ? true : options.keepAlive;\n  var checkTimeoutInterval = options.checkTimeoutInterval || 10 * 1000;\n\n  var optVersion = options.version || require(\"./version\").defaultVersion;\n  var mcData=require(\"minecraft-data\")(optVersion);\n  var version = mcData.version;\n\n\n  var client = new Client(false,version.majorVersion);\n  client.on('connect', onConnect);\n  if(keepAlive) client.on('keep_alive', onKeepAlive);\n  client.once('encryption_begin', onEncryptionKeyRequest);\n  client.once('success', onLogin);\n  client.once(\"compress\", onCompressionRequest);\n  client.on(\"set_compression\", onCompressionRequest);\n  if(haveCredentials) {\n    // make a request to get the case-correct username before connecting.\n    var cb = function(err, session) {\n      if(err) {\n        client.emit('error', err);\n      } else {\n        client.session = session;\n        client.username = session.selectedProfile.name;\n        accessToken = session.accessToken;\n        client.emit('session');\n        client.connect(port, host);\n      }\n    };\n\n    if (options.session) {\n      yggdrasil.validate(options.session.accessToken, function(ok) {\n        if (ok)\n          cb(null, options.session);\n        else\n          yggdrasil.refresh(options.session.accessToken, options.session.clientToken, function(err, _, data) {\n            cb(err, data);\n          });\n      });\n    }\n    else yggdrasil.auth({\n      user: options.username,\n      pass: options.password,\n      token: clientToken\n    }, cb);\n  } else {\n    // assume the server is in offline mode and just go for it.\n    client.username = options.username;\n    client.connect(port, host);\n  }\n\n  return client;\n\n  function onConnect() {\n    client.write('set_protocol', {\n      protocolVersion: version.version,\n      serverHost: host,\n      serverPort: port,\n      nextState: 2\n    });\n    client.state = states.LOGIN;\n    client.write('login_start', {\n      username: client.username\n    });\n  }\n\n  function onCompressionRequest(packet) {\n    client.compressionThreshold = packet.threshold;\n  }\n  var timeout = null;\n  function onKeepAlive(packet) {\n    if (timeout)\n      clearTimeout(timeout);\n    timeout = setTimeout(() => client.end(), checkTimeoutInterval);\n    client.write('keep_alive', {\n      keepAliveId: packet.keepAliveId\n    });\n  }\n\n  function onEncryptionKeyRequest(packet) {\n    crypto.randomBytes(16, gotSharedSecret);\n\n    function gotSharedSecret(err, sharedSecret) {\n      if(err) {\n        debug(err);\n        client.emit('error', err);\n        client.end();\n        return;\n      }\n      if(haveCredentials) {\n        joinServerRequest(onJoinServerResponse);\n      } else {\n        if(packet.serverId != '-') {\n          debug('This server appears to be an online server and you are providing no password, the authentication will probably fail');\n        }\n        sendEncryptionKeyResponse();\n      }\n\n      function onJoinServerResponse(err) {\n        if(err) {\n          client.emit('error', err);\n          client.end();\n        } else {\n          sendEncryptionKeyResponse();\n        }\n      }\n\n      function joinServerRequest(cb) {\n        yggserver.join(accessToken, client.session.selectedProfile.id,\n            packet.serverId, sharedSecret, packet.publicKey, cb);\n      }\n\n      function sendEncryptionKeyResponse() {\n        var pubKey = mcPubKeyToURsa(packet.publicKey);\n        var encryptedSharedSecretBuffer = pubKey.encrypt(sharedSecret, undefined, undefined, ursa.RSA_PKCS1_PADDING);\n        var encryptedVerifyTokenBuffer = pubKey.encrypt(packet.verifyToken, undefined, undefined, ursa.RSA_PKCS1_PADDING);\n        client.write('encryption_begin', {\n          sharedSecret: encryptedSharedSecretBuffer,\n          verifyToken: encryptedVerifyTokenBuffer,\n        });\n        client.setEncryption(sharedSecret);\n      }\n    }\n  }\n\n  function onLogin(packet) {\n    client.state = states.PLAY;\n    client.uuid = packet.uuid;\n    client.username = packet.username;\n  }\n}\n\n\n\nfunction mcPubKeyToURsa(mcPubKeyBuffer) {\n  var pem = \"-----BEGIN PUBLIC KEY-----\\n\";\n  var base64PubKey = mcPubKeyBuffer.toString('base64');\n  var maxLineLength = 65;\n  while(base64PubKey.length > 0) {\n    pem += base64PubKey.substring(0, maxLineLength) + \"\\n\";\n    base64PubKey = base64PubKey.substring(maxLineLength);\n  }\n  pem += \"-----END PUBLIC KEY-----\\n\";\n  return ursa.createPublicKey(pem, 'utf8');\n}\n"],"sourceRoot":"/source/"}