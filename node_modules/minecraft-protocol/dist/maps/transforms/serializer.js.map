{"version":3,"sources":["transforms/serializer.js"],"names":[],"mappings":"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","file":"transforms/serializer.js","sourcesContent":["var ProtoDef = require(\"protodef\").ProtoDef;\nvar Serializer = require(\"protodef\").Serializer;\nvar Parser = require(\"protodef\").Parser;\n\nvar minecraft = require(\"../datatypes/minecraft\");\nvar states = require(\"../states\");\n\nfunction createProtocol(types,packets)\n{\n  var proto = new ProtoDef();\n  proto.addType(\"string\",[\"pstring\",{\n    countType:\"varint\"\n  }]);\n  proto.addTypes(minecraft);\n  proto.addTypes(types);\n\n  Object.keys(packets).forEach(function(name) {\n    proto.addType(\"packet_\"+name,[\"container\",packets[name].fields]);\n  });\n\n  proto.addType(\"packet\",[\"container\", [\n    { \"name\": \"name\", \"type\":[\"mapper\",{\"type\": \"varint\" ,\n      \"mappings\":Object.keys(packets).reduce(function(acc,name){\n        acc[parseInt(packets[name].id)]=name;\n        return acc;\n      },{})\n    }]},\n    { \"name\": \"params\", \"type\": [\"switch\", {\n      \"compareTo\": \"name\",\n      \"fields\": Object.keys(packets).reduce(function(acc,name){\n        acc[name]=\"packet_\"+name;\n        return acc;\n      },{})\n    }]}\n  ]]);\n  return proto;\n}\n\nfunction createSerializer({ state = states.HANDSHAKING, isServer = false , version} = {})\n{\n  var mcData=require(\"minecraft-data\")(version);\n  var direction = !isServer ? 'toServer' : 'toClient';\n  var packets = mcData.protocol.states[state][direction];\n  var proto=createProtocol(mcData.protocol.types,packets);\n  return new Serializer(proto,\"packet\");\n}\n\nfunction createDeserializer({ state = states.HANDSHAKING, isServer = false,\n  packetsToParse = {\"packet\": true}, version } = {})\n{\n  var mcData=require(\"minecraft-data\")(version);\n  var direction = isServer ? \"toServer\" : \"toClient\";\n  var packets = mcData.protocol.states[state][direction];\n  var proto=createProtocol(mcData.protocol.types,packets);\n  return new Parser(proto,\"packet\");\n}\n\nmodule.exports = {\n  createSerializer:createSerializer,\n  createDeserializer:createDeserializer\n};\n"],"sourceRoot":"/source/"}