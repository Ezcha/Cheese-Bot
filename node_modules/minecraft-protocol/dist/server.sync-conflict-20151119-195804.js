'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var net = require('net');
var EventEmitter = require('events').EventEmitter;
var Client = require('./client');
var states = require("./states");

var Server = (function (_EventEmitter) {
  _inherits(Server, _EventEmitter);

  function Server(version) {
    _classCallCheck(this, Server);

    _get(Object.getPrototypeOf(Server.prototype), 'constructor', this).call(this);
    this.socketServer = null;
    this.cipher = null;
    this.decipher = null;
    this.clients = {};
    this.version = version;
  }

  _createClass(Server, [{
    key: 'listen',
    value: function listen(port, host) {
      var _this = this;

      var self = this;
      var nextId = 0;
      self.socketServer = net.createServer();
      self.socketServer.on('connection', function (socket) {
        var client = new Client(true, _this.version);
        client._end = client.end;
        client.end = function end(endReason) {
          endReason = '{"text":"' + endReason + '"}';
          if (client.state === states.PLAY) {
            client.write('kick_disconnect', { reason: endReason });
          } else if (client.state === states.LOGIN) {
            client.write('disconnect', { reason: endReason });
          }
          client._end(endReason);
        };
        client.id = nextId++;
        self.clients[client.id] = client;
        client.on('end', function () {
          delete self.clients[client.id];
        });
        client.setSocket(socket);
        self.emit('connection', client);
      });
      self.socketServer.on('error', function (err) {
        self.emit('error', err);
      });
      self.socketServer.on('close', function () {
        self.emit('close');
      });
      self.socketServer.on('listening', function () {
        self.emit('listening');
      });
      self.socketServer.listen(port, host);
    }
  }, {
    key: 'close',
    value: function close() {
      var client;
      for (var clientId in this.clients) {
        if (!this.clients.hasOwnProperty(clientId)) continue;

        client = this.clients[clientId];
        client.end('ServerShutdown');
      }
      this.socketServer.close();
    }
  }]);

  return Server;
})(EventEmitter);

module.exports = Server;
//# sourceMappingURL=maps/server.js.map
