"use strict";

var _Object$keys = require("babel-runtime/core-js/object/keys")["default"];

var ProtoDef = require("protodef").ProtoDef;
var Serializer = require("protodef").Serializer;
var Parser = require("protodef").Parser;

var minecraft = require("../datatypes/minecraft");
var states = require("../states");

function createProtocol(types, packets) {
  var proto = new ProtoDef();
  proto.addType("string", ["pstring", {
    countType: "varint"
  }]);
  proto.addTypes(minecraft);
  proto.addTypes(types);

  _Object$keys(packets).forEach(function (name) {
    proto.addType("packet_" + name, ["container", packets[name].fields]);
  });

  proto.addType("packet", ["container", [{ "name": "name", "type": ["mapper", { "type": "varint",
      "mappings": _Object$keys(packets).reduce(function (acc, name) {
        acc[parseInt(packets[name].id)] = name;
        return acc;
      }, {})
    }] }, { "name": "params", "type": ["switch", {
      "compareTo": "name",
      "fields": _Object$keys(packets).reduce(function (acc, name) {
        acc[name] = "packet_" + name;
        return acc;
      }, {})
    }] }]]);
  return proto;
}

function createSerializer() {
  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref$state = _ref.state;
  var state = _ref$state === undefined ? states.HANDSHAKING : _ref$state;
  var _ref$isServer = _ref.isServer;
  var isServer = _ref$isServer === undefined ? false : _ref$isServer;
  var version = _ref.version;

  var mcData = require("minecraft-data")(version);
  var direction = !isServer ? 'toServer' : 'toClient';
  var packets = mcData.protocol.states[state][direction];
  var proto = createProtocol(mcData.protocol.types, packets);
  return new Serializer(proto, "packet");
}

function createDeserializer() {
  var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _ref2$state = _ref2.state;
  var state = _ref2$state === undefined ? states.HANDSHAKING : _ref2$state;
  var _ref2$isServer = _ref2.isServer;
  var isServer = _ref2$isServer === undefined ? false : _ref2$isServer;
  var _ref2$packetsToParse = _ref2.packetsToParse;
  var packetsToParse = _ref2$packetsToParse === undefined ? { "packet": true } : _ref2$packetsToParse;
  var version = _ref2.version;

  var mcData = require("minecraft-data")(version);
  var direction = isServer ? "toServer" : "toClient";
  var packets = mcData.protocol.states[state][direction];
  var proto = createProtocol(mcData.protocol.types, packets);
  return new Parser(proto, "packet");
}

module.exports = {
  createSerializer: createSerializer,
  createDeserializer: createDeserializer
};
//# sourceMappingURL=../maps/transforms/serializer.js.map
